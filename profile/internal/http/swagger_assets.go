// Code generated by vfsgen; DO NOT EDIT.

//go:build !dev

package http

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// SwaggerAssets statically implements the virtual filesystem provided to vfsgen.
var SwaggerAssets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2025, 6, 11, 15, 35, 20, 25875100, time.UTC),
		},
		"/swagger.json": &vfsgen۰CompressedFileInfo{
			name:             "swagger.json",
			modTime:          time.Date(2025, 6, 11, 15, 33, 18, 703364400, time.UTC),
			uncompressedSize: 14009,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xec\x5b\xdd\x73\xdb\x36\x12\x7f\xf7\x5f\xb1\xc7\xbb\x99\x48\x57\x95\x72\x9c\x4e\x1f\x94\xf1\xcc\xb9\x76\x3e\xdc\xc9\x25\x1a\x7f\x3c\xdc\x84\x9e\x1a\x22\x97\x22\x1a\x10\x60\x00\x50\x8e\x9a\xf1\xff\x7e\xb3\x00\x28\x91\xb2\xa4\x28\xb1\x7b\xd7\x76\xdc\x87\x9a\x12\x80\xc5\x6f\x3f\x7e\x8b\x5d\x88\xf9\xbc\x07\x10\x99\x1b\x36\x9d\xa2\x8e\x46\x10\x1d\xc4\xfb\xd1\x80\xbe\xe3\x32\x57\xd1\x08\x68\x1c\x20\xb2\xdc\x0a\xa4\xf1\xb1\x56\x39\x17\x08\xe7\xa8\x67\x3c\x45\x38\x1a\x9f\xba\xf9\x00\x51\x86\x26\xd5\xbc\xb2\x5c\x49\x9a\xf9\x9a\xc9\x4c\xa0\x81\xda\xa0\x86\xca\x2f\x1b\x41\xaa\x91\xd1\x8c\x01\x68\xb4\x9a\xe3\x8c\xcb\xe9\x00\xea\x2a\x63\xd6\x3d\x65\x28\x90\x9e\x80\xc9\x0c\x04\x37\xee\x39\xac\x36\xcd\x4e\x33\xd4\x26\xec\xf2\x34\xde\x8f\xf6\x00\x6e\x1d\x66\xcb\xa6\x26\x1a\xc1\x7b\x37\xcb\x23\x07\x88\x24\x2b\xdb\xd0\x03\xf2\xc8\x0d\xdf\xee\x01\x5c\xb9\xb5\x26\x2d\xb0\xc4\xe5\xf2\xa8\xb0\xb6\x8a\x16\xc3\xa9\x92\xa6\xee\x8c\xb3\xaa\x12\x3c\x75\xca\x0c\x7f\x35\x4a\x2e\xe7\x56\x5a\x65\x75\xba\xe3\x5c\x66\x0b\xb3\xb4\xf3\x70\xf6\x74\xb8\xd0\x76\xb4\xd4\x61\x8a\xb6\xf5\x91\xe0\xd6\x65\xc9\xf4\x9c\xf4\x7a\xc3\x8d\x5d\x98\x08\x7a\xb9\xd2\xc0\xb2\x92\x4b\xd3\x0f\xf6\x5a\xe7\x9d\xee\xa2\xc9\x1c\x04\x2f\xf9\xc2\xf0\x15\x9b\x72\xe9\xe0\xb6\x45\xa8\x0a\xb5\xfb\xf2\x34\xbb\x6b\xcf\x5f\x48\xe2\xb8\xeb\x28\xb7\x4a\xa3\xa9\x94\x34\x1d\x7d\xdc\xc0\xc1\xfe\xfe\xca\x57\x77\x61\x1e\x81\xa9\xd3\x14\x8d\xc9\x6b\x01\x8d\xa4\xb8\x25\xde\x1b\x83\x7c\xc7\xee\x08\x03\x88\xfe\xa1\x31\x27\x39\x7f\x1f\x66\x98\x73\xc9\x49\xae\x69\x2c\xdc\x46\x7c\x16\x64\x47\x1d\x09\xb7\xad\x4f\xb7\xed\x4d\xa3\x0c\x73\x56\x0b\xfb\x65\x05\x24\xd4\x12\x3f\x55\x98\x5a\xcc\x00\xb5\x56\xfa\xe1\xf4\xd0\x55\x7a\x6e\x99\xad\xcd\x16\xd4\x7b\x6b\xf0\x47\x15\xd3\xac\x44\x8b\x7a\x19\xa3\xfe\xbf\x15\x65\x1a\xea\x54\x6c\x8a\xab\x60\xb9\xd3\xef\x63\x8d\x7a\xbe\x3a\xa4\xf1\x63\xcd\x35\x52\x94\xe4\x4c\x18\x5c\x19\xb6\xf3\xca\x49\x35\x56\x73\x39\x5d\x5d\x9c\x2b\x5d\x32\x32\x6c\xc4\xa5\xfd\xf1\x87\x68\x93\x0b\x36\x40\x75\x71\xfc\x27\xc1\x6a\x94\xb6\x3f\xcd\x7f\x37\xb0\xdf\x80\xe6\x9d\xce\x50\xaf\xee\xba\x1a\xd2\xe7\xc7\xf0\xee\x0c\x4e\x5e\x9c\x1f\xff\x4f\xa0\x2f\x9e\xaf\x5a\x11\xdc\x49\xf5\xe1\xbb\xc0\xe5\xe5\xe2\xab\xbd\x15\xed\xa3\x4a\x99\xcd\x89\xf4\x98\xce\x26\xec\x1c\x58\x5b\x32\xa8\x9f\xdd\x3d\xdf\x28\x91\xda\x02\x21\x63\x96\x01\x97\x55\x6d\x81\xd5\x56\x95\xcc\xf2\x94\x09\x31\xdf\x3d\x9b\x7a\xe9\xe3\xbb\x28\xfe\xb8\xe9\x34\x80\x7d\xcc\xa4\xdb\x48\x36\x51\xd9\x06\xc2\xaf\x1b\x69\x91\xc6\xea\x1a\x1f\xc6\x4f\x9d\xd0\x3a\xc3\x8f\x35\x1a\xbb\x8b\xda\xdf\x4e\xbf\xbd\x96\xd5\x3a\x25\xce\x70\x32\xff\x9e\xf8\x33\xfc\x4c\xff\x3f\xcd\x6e\x77\xad\x79\x5e\xa1\xbd\x43\x3c\xfa\xfc\x0b\xcf\xa0\xc7\x6a\x5b\x6c\xab\x7d\xb6\x2d\xce\xb5\x2a\x89\xb3\x05\x98\x50\xe1\xf6\x5c\x6a\xef\xef\x4e\xdd\x57\xd8\x54\x15\x3f\xcd\x2f\x49\xad\x93\x47\xfe\xfe\x65\xf8\xeb\xe3\x74\x3d\x83\xa9\x96\xff\x3a\x06\x7f\x7b\x75\xf1\xd5\xac\xec\xf8\xec\xa8\xb6\xc5\x57\xf1\xf4\x33\xbf\x1f\x37\x89\x96\xe1\xe3\xd7\x32\xb3\x79\x24\x11\xde\x4e\x70\x79\x79\x7a\xd2\x87\x1e\x2f\x2b\xa5\x2d\x93\x16\xac\x02\xa9\x2c\x94\xfc\x13\xdc\x70\x5b\xdc\x65\xf3\x37\xd1\xf7\x91\xb6\x7f\x19\xda\xf2\xdf\x8b\xb2\xbf\x57\xa1\xea\xee\x41\x70\x23\xc7\x4e\xdc\xf0\xae\xa5\xea\x9a\xd9\xc4\x2c\xa2\x51\x9b\x5e\x81\x5d\xbb\x53\xc5\xcb\xfd\x53\xb1\xa5\x03\xf9\x91\x33\x7f\x29\xce\x54\xcc\xa6\xc5\x46\xca\x5c\x56\xd9\x6a\x77\x07\xe3\xa3\x8b\xe3\xd7\x5b\x88\xb3\x6e\x4d\xc5\xb4\xe5\xd4\xcc\x81\xd2\x90\xd7\xf4\x90\x61\x85\x32\x23\xee\x28\x09\x3a\x54\xd4\x3b\xb3\xc8\x6f\xf2\x78\xe6\x3c\xf2\xe7\x1b\xf8\x33\xf8\x63\xb7\x9c\xdd\x50\xef\x44\xfa\x4f\xb4\xf9\x03\xb6\x9d\xbb\x17\xb8\x8b\xdf\x0b\x5a\x48\x97\x57\xf0\x5f\x82\xdc\xaa\x82\x1b\xbf\xa8\xc9\xaf\x98\x2e\x19\x1f\x55\x9a\x18\x6f\xf9\x0a\x73\x1b\x8f\x74\xb8\xbc\xc9\xb7\x9d\xc8\x2b\x94\xfc\xa6\x85\x2c\xcb\x34\x1a\xb3\xf3\xd2\xb5\x8d\xc0\xb6\x6b\x83\x7b\x18\x23\x74\x52\xdb\xa1\x75\x9c\xba\xb1\x1f\x6a\xab\xfc\x87\xb7\x71\x6b\x29\x96\x8c\x8b\x07\x71\xce\xfa\xb2\xe6\x1e\xde\x09\x87\xc7\x26\x70\x13\xa5\x04\x32\xb9\x5e\xad\x12\x8d\x61\x53\x7c\x10\xc5\xd6\xfe\x46\x73\x0f\xbd\xd6\xfc\xb8\xd6\x91\xc3\xb4\x66\xdd\x9c\x18\x71\x8b\xa5\xb9\x7b\x66\x6d\xd8\x79\x97\xe3\xf3\xd2\xa0\xbe\x53\xcf\x6c\x3a\x76\xac\xb2\x4c\x3c\x38\x4d\xaa\x2f\x3b\xe8\xeb\x85\xfa\xdf\x5e\x1e\x5a\x6a\xc1\xcc\x5b\xfc\x64\x77\x0f\xc5\x6d\xf1\xf4\x80\x14\x69\xfa\xae\x15\x5c\x5f\xef\xf9\x4e\x4a\xa0\x62\x67\x37\x91\x6b\x0a\x99\xad\xaa\xb7\xf7\xbe\x87\xda\x3c\xfb\x96\x54\xf7\x98\xed\x1f\x28\xdb\x5b\x35\xa9\xf3\x23\x79\xaf\x3a\xe4\x5f\x61\xc1\xce\xbe\xb8\xd3\x5b\x5c\x9e\xbd\x19\x6a\x34\xaa\xd6\x29\x02\x39\x01\x6c\xc1\x2c\xd4\x92\x7f\xac\x51\xcc\x81\x67\x28\x2d\xcf\x39\x1a\xf7\x7b\x18\xc9\x06\x95\xbb\x67\x83\x9a\x33\xc1\x7f\xc3\x2c\x91\x4e\x9f\x54\x09\x98\xd4\x79\x8e\x1a\xc2\xc9\x11\xc3\x45\xc1\x4d\x73\x1f\x51\xd6\xc6\x42\xaa\xa4\x65\x5c\x02\xb3\x20\x90\x19\x9b\x48\x25\x11\x92\x68\x98\x44\x90\x16\x4c\xb3\xd4\xa2\xa6\x75\x08\x82\x19\x0b\x06\xa7\x25\x4a\xdb\x6c\x7a\x79\xf6\xe6\x89\x01\xaa\xbc\xbd\x38\x8d\x95\x46\x83\xd2\x26\x92\x86\x7d\x1b\xf7\xb1\x66\x82\x30\x67\x5e\xa3\xb0\xd4\x61\xef\x31\x03\x5c\x26\xf2\x9a\x44\x0c\xa7\x4a\x4d\x05\xc6\x8d\x37\xe2\x93\xda\xb7\x77\xd7\x7d\x8f\xc0\x2d\x37\x85\xaa\x45\x06\x13\x04\x82\x0d\x29\x93\x4a\xf2\x94\x09\xa0\xc0\x4e\x64\x0f\xe3\x69\x3c\x20\x65\x5c\xe3\x98\x44\x71\x12\x01\x37\xee\x1e\x93\xa5\x29\x56\x16\xb3\x7e\x9c\xc8\x44\x9e\x4a\xa8\x48\x3f\x9e\xe2\x00\x2c\xb2\xd2\x40\x6d\x6a\xd7\x81\x56\x1a\x53\x55\x56\xee\xfe\x46\x5a\xe5\xf0\x4e\xb8\x64\x7a\x0e\x4c\x08\x07\xdd\x78\xcf\xd8\x02\xe7\x49\xe8\xa9\x80\xbb\x1b\xd3\xda\x38\x68\xb4\x86\xac\x8b\x9f\x9c\xb5\x8e\xe4\x3c\x86\xd7\xea\x06\x67\xa8\x07\x84\x95\x6c\x67\xe0\xa6\xe0\xa9\xbb\x57\xa5\xf9\x89\xf4\x6f\xcb\xc0\x75\x61\x6d\x75\x3d\xf0\x7f\xcd\xf5\x80\x5a\x62\xa9\xc0\x8f\x0e\x80\x5c\x94\x32\x09\xca\x45\x8e\x43\x6c\xd0\x42\x5d\x01\x73\xd8\x12\x69\x50\xcf\x50\x7b\x88\x25\xab\x8c\xb7\xb6\xdb\xd1\xaa\x26\x1c\xa0\x95\xf5\x80\x19\xc8\x95\x10\xea\xc6\x8c\xc8\x38\xff\x84\xd3\x7c\xb9\x25\x19\xb0\xd2\x6a\xc6\x33\xcc\x16\xa8\xe8\x4b\x66\x4c\x5d\x62\x16\xd3\x82\x23\x09\xaf\x2f\x2e\xc6\xf0\xea\xc5\x05\xf5\xeb\x21\x3c\x7c\x5c\xcc\x39\x8a\x0c\x18\xbc\x5f\x75\xf1\xc5\xbc\xc2\xab\xf7\x57\x89\x04\x98\x31\x51\x3b\xcb\x05\x4b\xfb\x44\xe5\x74\x0f\x6f\xfe\x00\x93\xbe\x6b\xf5\xfb\x2d\x5f\xfe\x31\xc0\x34\x92\x6b\xd4\x0d\x66\xa4\x61\xca\x52\x8a\x58\xa5\x3e\xd4\x15\xb5\xb8\xb5\xb0\x06\x26\xcc\x60\x16\xa0\xd1\x86\x97\x67\x6f\x9c\xf4\x82\xcd\x9c\xf9\xcb\x96\xdf\x33\xef\x78\xd6\x80\xa1\xe7\x99\xe2\x19\x30\x39\xa7\xb5\x5e\xb4\x0b\x4b\x8d\xb9\xd2\x38\x68\x66\x92\x00\x66\xf9\x84\x0b\x6e\xe7\x20\x11\x33\x67\xf3\x09\x82\xa3\x86\x9e\x11\x41\x81\x60\xa4\x05\x93\x53\x74\xa3\x2e\xa2\x62\xe8\x5d\x1a\x84\xf0\x16\x16\x29\x42\x4e\xa3\xa0\xf7\x5e\x63\x92\x4d\x1d\xf0\x89\x46\xf6\x81\xa2\x3b\x48\x88\xfb\xe4\xb2\xb7\xca\xe2\x08\x2c\x31\x3c\xaf\x65\xea\x43\x83\x30\x84\xe8\x4f\x6b\xad\x51\x5a\x31\x07\x36\x63\x5c\xb0\x89\x58\xc4\xa9\xca\x73\x9e\x72\x26\x42\xe6\x98\xd4\x39\x68\xa4\x7c\x80\x03\xf7\xde\x12\xb7\x8d\x90\x9a\x4c\x48\xd1\xbb\x0c\xa8\x09\x4e\xb9\x94\x04\xe7\x86\xdb\x22\x91\x34\x12\x7b\x3f\xb3\x8a\x9b\x38\x55\x65\x0c\x47\x86\x48\xf0\x6f\x36\x87\x83\xfd\x83\x67\x03\xda\x95\x3c\xa6\x91\x82\xec\x86\x67\x94\xdc\x9c\x6c\x27\xd7\x87\x6f\x22\x79\x59\x09\xa4\x7c\xd3\x78\x59\x66\x34\xbf\x12\x4c\x3a\x93\x2c\xc6\x89\x12\x8e\xd4\xe7\xfe\x75\x33\x50\xb4\x01\xc5\xbf\x5c\x25\x13\xf4\x08\x7d\x81\x80\x65\x65\xe7\x21\xc0\xfb\x50\xf2\x69\x61\x61\x82\x89\x74\x30\xdc\xcf\x1d\xdd\xed\xc1\x54\x98\xf2\x9c\xa7\x60\xb0\x64\xd2\xf2\xd4\xc4\x6b\x0e\x96\xc5\x29\xc1\xb2\x8c\x7b\x27\x8c\x3b\xe7\x45\xfb\x32\xba\x93\xfe\xaf\x8f\xe4\xfc\xba\xc9\xc8\xa4\x2c\x30\x3d\xe1\x56\x53\x54\x2d\xb3\x3b\x6c\x48\xee\xc0\x84\x0a\x3e\x00\x96\x48\xa2\x9e\xa3\xbf\xdf\x64\xb2\xf5\xc4\x58\x1c\x10\x64\xc2\x71\x13\x02\x82\x4f\xdc\xde\x81\xf9\x06\x4c\x5d\x55\x4a\xbb\x24\x57\xb1\xf4\xc3\xb0\x96\xf4\x87\x52\x9b\x27\xaf\x69\xe2\xc9\xa7\x62\x95\x43\x6d\x3d\x0d\x9a\x80\x34\xe0\xde\xa2\x6b\x0c\x03\x53\x94\xa8\x99\x75\x08\x6c\xa1\x32\xd3\x60\x23\x99\x2e\x90\x08\xd1\x8b\x4f\x8c\x3c\x01\x4f\x47\x30\xa6\x0d\x29\x0c\xc2\xde\x6c\xa1\x3e\x97\x70\xfc\xdd\x77\x6e\x3e\x19\xf7\xa5\x52\x90\x2b\x05\x87\x10\xc7\xf1\x73\xff\x1d\x09\x65\x72\x1e\x3e\x31\x39\x8f\x49\xdc\x4b\xad\xca\x5e\xae\x54\x3f\x7c\x1f\xc7\xb1\x7f\xe0\x39\xf4\x68\xd2\xa5\xdb\xea\x42\xf5\x92\x7a\x7f\xff\xe0\x47\x9a\xda\x87\xcf\x7e\x4e\x6b\xfa\x6d\x1b\xea\xc1\x17\xa0\xfe\xcc\x66\x6c\x17\xac\x70\xe8\x4e\x0e\x12\xb0\x15\x23\x37\xbd\x97\x4a\xc5\xa9\x60\xc6\xb4\xd1\x79\xb1\x34\xc3\xa3\x68\xcd\x7a\xbe\x80\x4d\x7f\x86\x43\x72\xcd\x1a\xb9\xe7\xac\x44\xca\xd2\x47\x7e\x87\x29\xda\x13\x7f\xdd\x78\x2a\x8d\x65\x32\xc5\x5e\xff\x8b\x1b\xae\x5d\xf4\xbc\x65\x36\x68\xec\xf6\xec\x0b\x76\x1b\xcf\x6d\xa1\xe4\xc2\x72\x7e\xb7\x97\x4a\xf5\xe2\x98\xb2\x60\xf0\xab\xb7\x5a\xaf\xdf\x75\xb4\x33\xe0\x5d\xfb\xd1\xf0\xa9\x57\xee\xe4\xc5\xf9\xf1\xd9\xe9\xf8\xe2\xdd\x59\x7f\xd4\x28\xb4\x8c\x80\xd6\xfa\x20\xa1\x05\xfc\x87\x2f\x00\x7f\xa5\x1a\xcc\x0e\xf4\xe8\x10\x7c\x34\x55\x93\xf8\xa5\x52\x9f\xe3\x38\x0e\x8e\xa0\x0d\x07\x74\xcc\xd1\x1c\x26\xe7\xd5\x24\x7e\x8b\x37\xed\xbd\x79\xee\x86\xff\x76\x08\x92\x8b\xa5\xe5\x97\x4a\x35\x3e\x6d\x7d\xb3\x6e\xcf\xdb\xae\x3c\xbf\x5d\x7c\x29\x4b\xa6\x4d\xc1\xc4\x85\xf2\x11\xb7\xc3\x66\x89\xa4\xf2\xcc\x29\xdd\xf0\xb8\x29\x17\xc2\x4f\xcd\xdd\x8c\x72\xc3\x85\xa0\x81\x70\x71\x4d\x99\x3f\x91\x4f\xd6\x1c\x1c\x43\xaa\x20\x63\x37\x40\xe7\xe0\x13\x2a\x53\x16\x69\x8c\x52\x1c\x99\x9b\xbe\xf0\x26\x4f\xe4\x22\x8d\x48\x7f\xa0\xc0\xba\x32\x74\x71\xae\x02\xcb\x2d\xfa\xd3\xc0\x55\xb7\x4f\x86\x4f\x12\x19\x72\x58\xb3\x85\x2f\xd6\x30\xb8\x39\x89\x72\xa5\xe2\x09\xd3\x0e\xdd\xa7\xe1\x3c\xfe\x2d\x89\xbc\x3e\xbe\xc6\xf1\xf5\x97\x13\x9e\x44\x6e\xd4\xc5\xc9\xcf\xe7\xef\xde\x26\xf2\xf0\xf0\xf0\xd0\xdb\x8a\x3e\x2f\xab\x65\x7f\xbe\x28\x8a\x45\xf0\xa7\x80\x2f\x86\x6a\x13\xd2\xb6\xc6\x69\x2d\x98\x4e\xe4\xdd\x25\xee\xbd\x38\x5c\xe6\xf2\x01\x60\x39\xc1\x2c\x5b\x66\xf5\x41\x38\x14\x64\x22\x5b\xa9\x37\x77\x70\xaf\x5d\xcf\x72\x1d\xea\xd0\xc5\xd9\xd3\x36\x40\xdc\xc4\xf8\xa8\x89\x60\x32\x35\x85\xf5\xb2\x98\xa3\xe6\x37\xf0\xb9\x89\xf9\x31\x6a\xa3\xe4\x32\x62\x42\xd7\x91\x73\x6d\xec\x2f\xce\x3e\x87\xf0\xf4\xf9\xca\x28\x79\xa1\x19\x3c\xe8\x24\x08\x80\xa5\xa8\xc4\x77\x5a\x49\x34\x82\x24\x5a\x17\x35\x5d\x60\xb1\x87\x92\x44\x83\xa5\x00\x07\xe3\x2d\x2b\xbd\x90\x7a\x7f\xff\x59\xea\x21\xb8\x67\x6c\xcd\x24\x48\x9b\x27\xb6\x20\x9e\xe6\xa1\xac\xe8\x5a\xdf\xdb\x91\x1b\xb8\x41\x21\xbe\xff\x20\xd5\x8d\x74\x51\x5b\x30\x43\xed\x4b\x6d\xac\x2a\xc1\x87\x47\xd7\xb9\x03\x7f\x7e\xaf\x78\xdc\x53\xa7\xb5\x0d\xb9\x54\x4e\x81\x79\x87\x26\xf2\xda\x85\x4e\xe3\xd1\x42\x89\xcc\xbb\xb3\xb5\x93\xeb\x9c\x42\x24\x40\x68\x6f\x42\x20\x24\xd2\x89\x59\xf8\xdc\xbf\xf7\xde\xa8\xf2\x7e\x53\x87\x76\xf5\xfe\xaa\x3f\xba\x8f\x9f\xba\xe2\x3a\xae\x72\xfa\x78\x19\x4f\xe3\x83\xa7\x07\x26\x89\x82\xd5\xa3\x4e\x13\xbf\xbc\xb7\xb9\x47\x0b\x9f\xaa\x6c\x63\x07\xcf\xa5\xc5\xe9\xca\x6b\xbc\xdd\xeb\x94\x67\x07\x5b\xfb\x7b\x22\xbe\x71\x10\x81\xf6\x19\x04\x1f\x2d\x3b\x5a\xea\x6f\x64\x5d\x06\xf6\xab\x3c\x91\x8d\xc5\x75\x95\xc6\xc7\x2a\xc3\xab\x3b\x5f\xc4\xf7\xb9\x2c\xde\x7e\x1b\x91\xe1\x0c\x05\xd9\xe9\xfb\x9c\xa5\x14\x64\xfe\x27\xc3\x65\x5a\x59\x81\xcf\x25\xbc\x90\x53\xc1\x4d\x11\xd3\xf9\xeb\x4a\xe9\xf5\x6b\x5b\x8b\x84\x4a\x43\x11\x4a\xac\xa0\x40\x0f\x55\x64\x57\x79\xef\xda\x38\x43\xcb\xb8\x30\x57\x5b\x86\x3c\x11\x5c\x67\xb7\x90\x9d\xc8\xf0\x06\x71\x2a\x38\x4a\xbb\xc1\x66\x41\xc2\xff\xed\x0e\x7b\x71\x07\xb5\xe5\x97\xde\x15\x17\x09\x6e\xdc\xf5\x42\xb0\x6b\xb8\x95\x48\x99\xd6\x5e\x5f\x6f\xf5\xa0\x58\x0c\xbe\x5f\x75\x9d\x3b\x35\xaa\x25\x75\x35\x68\x5d\xa4\xb5\xd3\x95\x71\x67\xde\xd1\xf8\xd4\x84\x0b\x8d\xad\x8d\xce\x9a\x28\xbf\xf6\x3e\xb9\xf6\xc9\xcf\xa9\x89\xb4\xa7\x50\x53\x77\x57\x13\x82\x41\x65\x28\x3c\x62\x4e\xdd\x05\xb7\xae\x29\xcd\x95\x4e\x64\xc6\xa9\xb9\xa1\x68\xa8\xb4\x9a\x6a\x56\x96\x2e\x88\xe4\x8c\x6b\x25\xa9\x27\x33\x03\xe0\x32\x15\xb5\xcb\x7e\x67\x2f\xce\x2f\x3c\x5e\x0a\xa2\xb3\xf1\xb1\xfb\x10\xc3\x29\x49\x0e\x2d\xdd\x64\x0e\xef\xa7\x67\xe3\xe3\xab\x9e\x6b\x04\x47\xc3\xe1\x94\xdb\xa2\x9e\xf8\x4c\xa4\xab\xb4\x1f\xc3\x0b\x96\x16\x4b\xf0\x8d\x49\x9a\x63\x31\x91\xb6\xd0\x88\x50\x71\x4c\xd1\xb5\x2a\x19\xb3\x6c\x14\xb4\xf1\x94\x5e\xa1\x08\xc1\xe9\xfa\x80\xb2\xe4\x7f\x54\xed\x2e\x70\x72\x2e\x33\x50\xb5\x85\x52\x51\x37\x3c\xa1\x47\xd7\xc0\xb7\xed\xe3\x0e\x0b\x75\x43\x9e\xb8\x51\xfa\x43\x68\x4d\x5b\x2c\x39\x1a\x9f\xc2\x09\x1a\x3e\x95\xf0\xaa\xe6\x19\x2e\x15\x4c\x85\xaa\xb3\x90\x74\x9d\x9a\x94\x79\x87\x99\x9b\x3b\x74\x7b\x98\x7e\xbc\xfc\x17\x5b\xb7\x7b\xb7\x7b\xff\x0d\x00\x00\xff\xff\x1d\xc9\xdd\xee\xb9\x36\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/swagger.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(io.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
