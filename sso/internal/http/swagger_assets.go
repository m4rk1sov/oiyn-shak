// Code generated by vfsgen; DO NOT EDIT.

//go:build !dev

package http

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// SwaggerAssets statically implements the virtual filesystem provided to vfsgen.
var SwaggerAssets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2025, 6, 5, 18, 48, 34, 171219000, time.UTC),
		},
		"/swagger.json": &vfsgen۰CompressedFileInfo{
			name:             "swagger.json",
			modTime:          time.Date(2025, 6, 3, 19, 26, 30, 506081000, time.UTC),
			uncompressedSize: 15123,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xec\x9a\xdf\x6f\xdb\xb6\x13\xc0\xdf\xf3\x57\x1c\xf4\xfd\x3e\x6c\x80\x16\xa7\xdd\xb0\x87\x3c\x2d\xdd\x8f\x36\xc0\x80\x05\xc9\xba\x97\xb6\x28\x68\xf1\x64\xb1\x95\x49\x95\xa4\xe2\x1a\x85\xff\xf7\x81\xa4\x64\x51\xb2\x24\xcb\x3f\x32\x3b\x80\x0a\xf4\x21\xd2\xf1\x7c\xbc\xe3\x87\x77\x3a\xf2\xdb\x05\x40\xa0\x16\x64\x36\x43\x19\x5c\x43\xf0\xf2\xf2\x2a\x08\xcd\x33\xc6\x63\x11\x5c\x83\x79\x0f\x10\x68\xa6\x53\x34\xef\x1f\x1e\xfe\x82\x07\x94\x8f\x2c\x42\xb8\xb9\xbb\xb5\xb2\x00\x01\x45\x15\x49\x96\x69\x26\xb8\x91\x7a\x43\x38\x4d\x51\x41\x2a\x66\x8c\x87\x20\x71\xc6\x94\x46\x19\x82\x16\x9f\x91\xab\x10\x32\x94\x73\xa6\x14\x13\x5c\x95\x2a\x1e\x51\xaa\x62\xf8\x8b\xcb\xab\xe0\x02\x60\x65\x0d\xd1\x64\xa6\x82\x6b\x78\x67\xa5\x9c\x39\x00\x01\x27\x73\x6b\xcf\x4d\xae\x93\xc0\x3e\x5c\x85\xed\x12\x77\xeb\x9f\x2a\xe4\x2e\x00\x3e\x58\xcd\x2a\x4a\x70\x8e\x95\xf2\x20\xd1\x3a\x0b\xd6\xaf\x23\xc1\x55\x5e\x7b\x4f\xb2\x2c\x65\x11\x31\xb3\x9c\x7c\x52\x4e\xa1\x93\xcd\xa4\xa0\x79\x34\x50\x96\xe8\x44\x55\xae\x9d\x3c\xbe\x98\x90\x5c\x27\x93\x58\xc8\x99\xd0\x3f\x64\x44\xa9\x85\x90\x74\x2d\x61\x86\x08\xa5\xbd\xbf\x8d\xed\xf9\x7c\x4e\xe4\xd2\x4c\xf0\x0f\x3b\x0e\xca\x71\x20\xf1\x4b\x8e\x4a\x17\x7e\x6d\x0b\xcf\xab\x25\x64\x52\x3c\x32\xca\xf8\x0c\x74\x82\x80\x73\xc2\x52\x20\x9c\x02\xc9\xb2\x8f\x8c\xc2\x82\xa5\x29\x48\xd4\xb9\xe4\x2e\x66\x10\x0b\x09\x12\x15\x6a\x6d\x06\xad\x8d\xf4\x7e\x44\x64\x28\xed\x7c\x6f\x69\x19\x99\x8f\xce\xb6\xbb\x16\x69\x89\x2a\x13\x5c\xa1\xaa\xcd\x0b\x20\x78\x79\x75\xd5\x78\xb4\x39\x81\x1b\x50\x79\x14\xa1\x52\x71\x6e\xcc\x74\x9a\x2e\x3d\xf5\xce\x47\x26\xbe\x64\x43\x99\x59\x53\xcb\xcc\xae\x0d\x31\xfd\x84\x91\x6e\x8c\x73\xe1\xcc\x50\x6a\xe6\xac\x5b\xd5\x5e\xfb\x7f\xad\xfc\x91\x01\xc5\x98\xe4\xa9\xde\x6e\x3d\x87\x9c\xe3\xd7\x0c\x23\x8d\x14\x50\x4a\xe7\xda\x5d\x27\xf1\x7f\x89\xb1\x51\xf7\xbf\x09\xc5\x98\x71\x66\xd4\xab\x89\xcc\xa2\x07\x4d\x74\xae\x82\x6e\xab\x2f\x5a\xec\x0f\x32\x22\xc9\x1c\x35\xca\x6a\x11\xbb\x7f\x8d\xc9\x94\x5c\x4d\x05\x5d\x36\x8d\x65\xbc\xeb\x8d\x59\x94\x4c\xa2\x59\x19\x5a\xe6\x78\xe0\x24\x0d\x2f\xf5\xa5\x75\x5f\x2c\xfa\x01\x93\xfe\xe0\x4d\xba\xb6\xb9\x14\xcf\xaa\x2d\xc5\x4a\x5f\xf8\xe3\x0b\x87\x55\xd0\xda\x1d\x6e\x30\xaa\x7f\x1a\x69\xc8\x15\xca\x1e\x3a\x2b\xa1\x10\xa6\x4b\x8f\xcd\x12\xba\xb0\xa0\x17\x2d\xbb\x05\xb1\x86\x4f\xf3\xbf\xda\x59\x21\x4a\x30\xfa\x0c\x71\x2e\x75\x62\x74\x39\x9c\x15\x10\x4b\x8e\xd5\x28\x31\x96\xa8\x92\x62\x5b\x86\x05\xd3\x09\xe0\xd7\x8c\x49\x04\xcd\xe6\xb8\x8d\x6e\x6b\xe9\xd9\x40\xdd\xbd\x54\xac\x9d\xf7\x85\xc6\x60\xa4\xf9\x0c\x69\x2e\x42\x74\x32\x88\x45\xae\x77\xa1\x58\xe4\x7a\x00\xc6\xa5\x94\xc1\xb8\x86\x5a\x08\x14\x53\xd4\xa8\x2c\xc1\x2e\xc1\x32\x0e\xbf\xbd\x1a\x40\x9c\xb1\xf4\x59\x20\x27\x72\x3d\x32\x77\xe6\xcc\xd9\x18\x9d\x06\xba\x02\x88\xc1\xd4\xdd\x97\x00\x95\xc4\xa8\x1e\xf8\xee\x5d\xe9\xca\x71\xb1\x43\xba\x33\x98\x1a\xed\x35\xb1\x6d\x44\x16\x66\xfd\xdd\x94\x3d\x53\x2e\x7d\x73\x47\x3a\xcf\x99\xce\x7a\xa4\x4e\xc5\xa8\xfb\x70\xdf\x01\x52\x37\x60\x5b\x72\xac\xc9\xc1\x94\x28\xa4\x20\x38\xcc\x90\xa3\x24\x29\x30\x1e\x0b\x39\xb7\xa8\xc1\x77\x26\x20\x21\x64\x89\xe0\x18\x02\xa1\x54\xa2\x52\x61\x4b\x59\xfc\x7d\x55\xe2\x1a\xad\x1f\x19\x0d\xc1\x8c\xb5\x42\x56\x7c\x3b\xcb\xc5\x74\x9f\x03\xc7\xce\xd4\x91\xe1\xf3\x66\xb8\x8c\xd2\xa9\xf8\x55\xb8\x47\x47\xe9\xde\x0c\x6b\xed\xf1\x6c\x36\x92\xaa\x02\x56\x62\x84\xec\x11\x29\x2c\x12\xd7\x2f\xaa\x75\xa5\x16\x44\x95\x9d\x29\xa4\x61\xd9\x60\x72\x89\x76\x68\x37\xc9\xda\x35\x36\x93\x46\x50\x9f\x00\x54\x6f\x65\x9d\x8a\x56\x9b\x33\x3d\x46\x67\xd8\x8d\xe8\x6b\x2c\x3e\x2d\x6d\x9f\xbe\x9b\xd0\x9a\xdc\x75\x3d\x31\xae\x93\xaa\x4d\x8e\xeb\xdc\x7a\x09\xaf\xca\x7c\x6c\xfb\x4b\xae\x7e\x1e\x54\x0c\xbf\x46\xfd\x56\xa1\xbc\x6d\xd8\x74\xa6\x39\xd4\xb3\x76\x4c\xa3\x7d\x74\xba\x25\xd0\xfc\xc4\xf1\x20\xfd\x92\xa3\xec\xa3\x34\x26\xa9\x6a\x62\x5a\x6e\x9b\x4a\x4b\xc6\x67\xc1\xd3\xe3\xf5\x88\x92\xc5\xe5\x91\x4c\x24\x78\xcc\xe4\x7c\x70\x4a\xfc\xdd\x96\x9b\xbe\x0a\x28\x54\xd8\x3f\x7a\x08\x74\x23\x6d\xbe\x9b\x62\xa1\x01\x29\x90\xd8\x94\xbf\x5e\xfb\x47\x95\x0a\x71\x6b\x1e\xb4\x2a\xff\x31\x9a\x96\x63\x16\x1c\xb3\xe0\xd1\xb2\xa0\xb7\xae\x4e\x95\x03\x6b\x90\x2a\xe4\xf4\x10\x42\x4b\xe8\xac\x9e\x6d\x84\xd6\x46\x16\x95\xaa\x19\xa9\x3d\x54\xdd\xf7\xb0\xe3\x31\x34\xbc\x6a\xc2\xf8\xc0\xdc\xf8\x80\x9c\x56\x0e\x2e\x7e\x68\xc4\x77\xc4\xf7\x68\xf8\xb6\xae\xb0\x13\x80\xec\x5d\xee\x98\x7c\x33\x15\xe7\x2d\x5d\xed\x5c\xd7\x6e\xde\x10\xe9\x2d\x6f\x3d\xf1\xb2\x8d\xbb\xae\x75\xd7\x07\x9f\x52\x92\x65\x0f\xa6\xd5\x4d\x91\xb2\x90\xbd\x6b\x37\xe2\xbc\xeb\x59\xcf\xe8\xb1\xac\xed\xe3\xd5\x2d\xcd\x76\x62\x33\xa2\x93\xdd\x88\x6d\xd4\xb3\x8d\xb7\xae\x9f\x69\xde\x33\xae\x7f\xfe\x69\xbf\x72\xb7\x79\x95\x69\x77\x0c\x27\xdf\xaa\xa7\x83\x99\xfc\xd5\xdd\x23\x10\xb2\x89\x5a\x0f\x98\xd5\x98\x45\x82\x3a\x29\x3b\xbd\x09\x51\xfe\x0d\x05\x21\x81\x0b\xdd\x00\xd6\x35\x75\xd7\x42\x15\xbf\x53\x21\xd2\x61\xf8\xbe\x21\xaa\x4e\xc2\x33\xa0\x77\xc3\xe6\x11\xde\xe7\x00\x6f\xb8\xdd\xd4\x56\x60\x8e\x69\xee\x53\x6d\x26\xeb\x3b\x98\x5e\x84\xab\x8b\x8b\x1d\x5f\x0c\xde\xa6\xd2\x51\x54\x36\x8a\x49\xcf\x4c\x5b\x47\x37\xa8\xec\x9a\xeb\xaa\x75\xe3\xeb\xbe\x19\x76\x80\x5d\xee\xf0\x68\xa8\x5d\x9e\xdf\x49\x96\xdd\xd2\xae\x81\x8c\x6b\x9c\xd5\x0e\x9b\x9a\x4b\xed\xc7\x97\x43\xa6\xdb\xd6\xc6\x3a\x60\xb2\x05\x58\xfd\xb3\xed\xb6\xd9\xc7\xc3\x77\xc5\xde\x3e\x2c\x28\xda\x79\x9c\xed\x6d\xee\x15\x34\xd7\x06\x3d\x7c\x1d\xf6\xd4\x63\x07\xc4\xc7\x2f\x8c\x3b\x4c\x6c\x16\xba\x66\xa7\xd1\x38\x57\x9b\xa9\xa1\x67\x23\xa9\x0d\x5f\xdf\xff\x7e\xf7\xde\x2e\x90\xf7\x41\x08\xa8\xa3\x0f\x43\xdc\xd0\x9d\xd8\x0e\xf0\x02\x49\x53\xb1\xc0\xce\x65\x6a\x4a\x05\x24\x7c\x88\x79\xb5\x9b\x67\xa7\xd8\x24\x5a\x8e\xe7\xce\x6b\x83\xa9\x5f\x9f\x3c\x24\x68\x5e\x1f\x79\x8f\xc9\x4a\xff\xaa\xcd\x1e\xe3\xdd\x55\x1f\x75\xa3\xdf\x72\xf6\xf5\x38\x1b\x5c\x9f\xcf\xbc\xbb\x55\x07\xf8\x6c\xaf\x49\x6f\x35\xeb\xf0\x58\x16\x65\xf0\x11\x00\x6c\xbb\xe8\x72\x36\x0e\x6b\xbd\x2f\x35\x22\x30\xcc\x75\xf5\xcb\x0f\x07\x78\xed\xec\x6b\x80\xf0\x14\x79\x60\x80\xe7\xcf\xb6\x1c\xdc\x37\xa2\xbb\x79\xb7\xc7\x43\x2d\xe7\xfd\xff\xd9\x97\x8b\xef\x07\x5c\xdc\x1d\x2d\xee\xbd\x0d\xe0\xf3\x5b\x03\x4f\x5e\xbc\x64\x52\x68\x31\xcd\xe3\x1b\xbe\x3c\x64\xfa\xbf\x14\x03\x76\x8b\xce\x5a\x2d\xa1\xd4\x7e\x3a\x93\xf4\xae\xe5\x10\xa5\xb4\xb5\x6a\x9c\x1c\x60\x69\x24\x28\x1e\xc9\xa1\x5e\x9c\xe6\xa8\x14\x99\xed\x85\x2b\x45\x4d\x58\x7a\xc4\x0f\x95\xd6\xf3\xa9\x8e\x5e\x94\x1f\xfe\xf6\xfe\xd3\x66\xbb\xe3\x62\x75\xf1\x6f\x00\x00\x00\xff\xff\x5b\x39\x4c\x74\x13\x3b\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/swagger.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(io.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
